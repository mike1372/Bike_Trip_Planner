class BikeRoutesController < ActionController::Base

	def show
		lat = -37.81012301 # get origin latitude, hard coded for now
		long = 144.96966362 # get origin longitude, hard coded for now
		lat2 = -37.80802086 # get destination latitude, hard coded for now
		long2 = 144.96017933 # get destination longitude, hard coded for now
		# Get the differences of the latitudes and longitudes
		lat_diff = lat - lat2
		long_diff = long - long2
		# Start the current position at the origin
		current_lat = lat
		current_long = long
		# Set the destination coordinates
		final_lat = lat2
		final_long = long2
		# Generate the grid around the origin
		eastern_border = long + long_diff.abs
		western_border = long - long_diff.abs
		northern_border = lat + lat_diff.abs
		southern_border = lat - lat_diff.abs
		# Array to store the bike paths in range
		points_in_range = []
		# Array to store the final route result, add the origin to it to begin with
		route = [[lat, long]]
		# Get all the mid points from the database
		mid_points = MidPoint.all

		# Select the mid_points in range and add them to the points_in_range array
		mid_points.each do |mid_point|
			if mid_point.mid_long <= eastern_border && mid_point.mid_long >= western_border && mid_point.mid_lat <= northern_border && mid_point.mid_lat >= southern_border

				points_in_range << [mid_point.mid_lat, mid_point.mid_long]

			end
		end

################################################################################
	
			# No nore points in range so complete the result and return
			if points_in_range == []
				route << [lat2, long2]
				return route
			end
		
			# Scan the returned mid points for the closest midpoint, set closest latlong to this value
			closest_distance = distance_to(points_in_range.first[0], points_in_range.first[1], lat, long)
			closest_lat = points_in_range.first[0]
			closest_long = points_in_range.first[1]
			points_in_range.each do |latitude, longitude|
				distance = distance_to(current_lat, current_long, latitude, longitude)
				if distance < closest_distance
					closest_lat = latitude
					closest_long = longitude
					closest_distance = distance
				end
			end
			
			# Get all mid points in the bike path which contains the closest mid point
			mid_point = MidPoint.find_by mid_lat: closest_lat, mid_long: closest_long
			bike_path = mid_point.bike_routes.first.mid_points

			# Scan the bike_path for the midpoint closest to the destination, note start from the original closest point
			closest_distance = distance_to(closest_lat, closest_long, final_lat, final_long)
			closest_lat2 = closest_lat
			closest_long2 = closest_long
			counter = 0
			while counter < bike_path.length
				distance = distance_to(bike_path[counter].mid_lat, bike_path[counter].mid_long, final_lat, final_long)
				if distance < closest_distance
					closest_lat2 = bike_path[counter].mid_lat
					closest_long2 = bike_path[counter].mid_long
					closest_distance = distance
				end
				counter += 1
			end

			# Add the closest positions to the results array
			# -------- If the two points are the same shoud they be omitted? --------
			route << [closest_lat, closest_long]
			route << [closest_lat2, closest_long2]
			
			# Add the destination
			route << [final_lat, final_long]
			
			binding.pry
			puts 'do not render yet'
	end

	private
	# Computes the distance between two sets of latlong coordinates
	def distance_to(lat1, long1, lat2, long2)
		height = lat1 - lat2
		width = long1 - long2
		return Math.sqrt((height*height) + (width*width))
	end

end
